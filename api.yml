openapi: 3.0.3
info:
  title: ServerExizt API
  description: API for the Exizt application to manage friendships and competitions
  version: 1.0.0
  
servers:
  - url: http://localhost:8000
    description: Local development server
  
components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Format - "Token {your_token}"
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
    
    Profile:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        name:
          type: string
        avatar:
          type: string
          format: uri
          
    FriendRequest:
      type: object
      properties:
        id:
          type: integer
        sender:
          $ref: '#/components/schemas/User'
        receiver:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [pending, accepted, rejected]
        created_at:
          type: string
          format: date-time
          
    Competition:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        creator:
          $ref: '#/components/schemas/User'
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [upcoming, active, completed, cancelled]
        winner:
          $ref: '#/components/schemas/User'
          nullable: true
        created_at:
          type: string
          format: date-time
          
    Participant:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        competition:
          $ref: '#/components/schemas/Competition'
        joined_at:
          type: string
          format: date-time
        position:
          type: integer
          nullable: true
        average_daily_usage:
          type: number
          format: float
          nullable: true
    
    CompetitionInvitation:
      type: object
      properties:
        id:
          type: integer
        competition:
          $ref: '#/components/schemas/Competition'
        sender:
          $ref: '#/components/schemas/User'
        receiver:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [pending, accepted, declined, expired]
        created_at:
          type: string
          format: date-time

security:
  - TokenAuth: []

paths:
  # User Authentication
  /signup/:
    post:
      security: []
      tags:
        - User
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Bad request

  /login/:
    post:
      security: []
      tags:
        - User
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/Profile'
        401:
          description: Invalid credentials

  # User Profile
  /is-authenticated/:
    get:
      tags:
        - User
      summary: Check if user is authenticated
      responses:
        200:
          description: User is authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /profile/:
    get:
      tags:
        - User
      summary: Get user profile
      responses:
        200:
          description: Profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'

  /update-profile/:
    put:
      tags:
        - User
      summary: Update user profile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        200:
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request

  /delete-user/:
    delete:
      tags:
        - User
      summary: Delete user account
      responses:
        204:
          description: User deleted

  # Friendships
  /send-request/:
    post:
      tags:
        - Friendships
      summary: Send friend request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                user_id:
                  type: integer
      responses:
        201:
          description: Friend request sent
        400:
          description: Bad request
        404:
          description: User not found

  /handle-request/:
    post:
      tags:
        - Friendships
      summary: Accept or reject friend request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                request_id:
                  type: integer
                action:
                  type: string
                  enum: [accept, reject]
      responses:
        200:
          description: Request handled
        400:
          description: Bad request
        404:
          description: Friend request not found

  /friend-requests/:
    get:
      tags:
        - Friendships
      summary: Get all friend requests
      responses:
        200:
          description: Friend requests retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  sent_requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/FriendRequest'
                  received_requests:
                    type: array
                    items:
                      $ref: '#/components/schemas/FriendRequest'

  /friendships/:
    get:
      tags:
        - Friendships
      summary: Get all friends
      responses:
        200:
          description: Friends retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'

  /delete-friend/:
    post:
      tags:
        - Friendships
      summary: Delete a friendship
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                friend_id:
                  type: integer
      responses:
        200:
          description: Friendship deleted
        400:
          description: Bad request
        404:
          description: Friendship not found

  # Competitions
  /competitions/:
    get:
      tags:
        - Competitions
      summary: Get all user's competitions
      responses:
        200:
          description: Competitions retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition'

  /competitions/create/:
    post:
      tags:
        - Competitions
      summary: Create a new competition
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                start_date:
                  type: string
                  format: date-time
                end_date:
                  type: string
                  format: date-time
      responses:
        201:
          description: Competition created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competition'
        400:
          description: Bad request

  /competitions/active/:
    get:
      tags:
        - Competitions
      summary: Get active competitions
      responses:
        200:
          description: Active competitions retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competition'

  /competitions/{competition_id}/:
    get:
      tags:
        - Competitions
      summary: Get competition details
      parameters:
        - name: competition_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Competition details retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Competition'
                  - type: object
                    properties:
                      participants:
                        type: array
                        items:
                          $ref: '#/components/schemas/Participant'
        403:
          description: Access forbidden
        404:
          description: Competition not found

  /competitions/{competition_id}/participants/:
    get:
      tags:
        - Competitions
      summary: Get competition participants
      parameters:
        - name: competition_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Participants retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
        403:
          description: Access forbidden
        404:
          description: Competition not found

  /competitions/{competition_id}/leave/:
    post:
      tags:
        - Competitions
      summary: Leave competition
      parameters:
        - name: competition_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Left competition
        400:
          description: Cannot leave (creator or not participant)
        404:
          description: Competition not found

  /competitions/invitations/:
    get:
      tags:
        - Competitions
      summary: Get competition invitations
      responses:
        200:
          description: Invitations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompetitionInvitation'

  /competitions/invitations/send/:
    post:
      tags:
        - Competitions
      summary: Send competition invitation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                competition_id:
                  type: integer
                receiver_id:
                  type: integer
      responses:
        201:
          description: Invitation sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionInvitation'
        400:
          description: Bad request

  /competitions/invitations/handle/:
    post:
      tags:
        - Competitions
      summary: Accept or decline invitation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invitation_id:
                  type: integer
                accept:
                  type: boolean
      responses:
        200:
          description: Invitation handled
        400:
          description: Bad request